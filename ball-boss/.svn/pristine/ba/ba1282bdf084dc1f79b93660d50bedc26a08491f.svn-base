package com.lc.zy.ball.boss.framework.ssouser.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.eclipse.jetty.util.ajax.JSON;
import org.jasypt.commons.CommonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springside.modules.web.Servlets;

import com.lc.zy.ball.boss.common.Constants;
import com.lc.zy.ball.boss.common.FlashAttributeUtil;
import com.lc.zy.ball.boss.common.web.AbstractController;
import com.lc.zy.ball.boss.framework.ssouser.service.CtaService;
import com.lc.zy.ball.boss.framework.ssouser.service.SsoUserService;
import com.lc.zy.ball.boss.framework.ssouser.vo.CoachVo;
import com.lc.zy.ball.boss.framework.ssouser.vo.CtaUserVo;
import com.lc.zy.ball.boss.framework.statium.service.StatiumDetailService;
import com.lc.zy.ball.common.data.pageable.Page;
import com.lc.zy.ball.common.data.pageable.PageRequest;
import com.lc.zy.ball.domain.oa.po.CoachResume;
import com.lc.zy.ball.domain.oa.po.CtaUser;
import com.lc.zy.common.mq.QueueProducer;
import com.lc.zy.common.util.MyGson;
import com.lc.zy.common.util.Zonemap;
import com.lc.zy.common.web.Token;
import com.lc.zy.common.web.WebUtils;

/**
 * 用户管理 - 网协账户管理
 * ClassName: CtaController 
 * @Description: TODO
 * @author zhaoxing
 * @date 2017年1月10日  上午10:31:58
 */
@Controller
@RequestMapping(value = "/ssouser/cta")
public class CtaController extends AbstractController {

    private static final Logger logger = LoggerFactory.getLogger(CtaController.class);

    @Autowired
    private CtaService ctaService;
    
    @Autowired
    private StatiumDetailService statiumDetailService;
    
    @Autowired
    private QueueProducer queueProducer;
    
	@Autowired
	private SsoUserService ssoUserService;

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

   /**
    * 
    * 网协账户 分页展示
    * @Description: TODO
    * @param model
    * @param request
    * @param redirectAttributes
    * @return
    * @throws Exception   
    * @return String  
    * @throws
    * @author zhaoxing
    * @date 2017年1月10日 下午4:27:33
    */
    @RequestMapping(value = "")
    public String CtaList(Model model, HttpServletRequest request, RedirectAttributes redirectAttributes)
            throws Exception {
        logger.debug("CtaController CtaList method execute!");
        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, "search_");
		int page = WebUtils.getPage(request);
		int size = WebUtils.getPageSize(request);
		if(size==0){
			size =10;
		}
		Page<CtaUser> onePage = ctaService.list(new PageRequest(page, size), searchParams);
		model.addAttribute("data", onePage);
		// 将搜索条件编码成字符串，用于排序，分页的URL
		model.addAttribute("searchParams", Servlets.encodeParameterStringWithPrefix(searchParams, "search_"));
		
        return "ssouser/ctaList";
    }

   /**
    * 网协账户 添加
    * @Description: TODO
    * @param model
    * @return
    * @throws Exception   
    * @return String  
    * @throws
    * @author zhaoxing
    * @date 2017年1月10日 下午4:27:21
    */
    @Token
    @RequestMapping(value = "create", method = RequestMethod.GET)
    public String create(Model model) throws Exception {
        model.addAttribute("action", "create");
       CtaUserVo cta = new CtaUserVo();
        model.addAttribute("signUser", statiumDetailService.getSignUser());
        model.addAttribute("cta", cta);
        return "/ssouser/ctaForm";
    }
	
    @RequestMapping(value = "edit/{id}")
    public String edit(@PathVariable String id, Model model) {
    	CtaUser ctaUser;
        try {
        	ctaUser = ctaService.getCtaUserVo(id);
            model.addAttribute("ctaUser", ctaUser);
        } catch (Exception e) {
            logger.error("查看网协账户失败！", e);
        }
		return "/ssouser/ctaForm";
    }

   /**
    * 查看网协账户
    * @Description: TODO
    * @param request
    * @param model
    * @return   
    * @return String  
    * @throws
    * @author zhaoxing
    * @date 2017年1月10日 下午4:26:41
    */
    @RequestMapping(value = "view/{id}")
    public String view(@PathVariable String id, Model model) {
    	CtaUser ctaUser;
        try {
        	ctaUser = ctaService.getCtaUserVo(id);
            model.addAttribute("ctaUser", ctaUser);
        } catch (Exception e) {
            logger.error("查看网协账户失败！", e);
        }
		return "/ssouser/ctaView";
    }

    /**
     * 删除网协账户
     * @Description: TODO
     * @param id
     * @param model
     * @return   
     * @return String  
     * @throws
     * @author zhaoxing
     * @date 2017年1月10日 下午4:29:35
     */
    @RequestMapping(value = "delete/{id}")
	public String deleteCtaUser(@PathVariable String id, Model model) {
		if (StringUtils.isNotEmpty(id)) {
			try {
				ctaService.deleteCtaUserById(id);
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("deleteCtaUser error:" + e.getMessage());
			}
		}
		return "redirect:/ssouser/cta";
	}
    
    @RequestMapping(value = "save", method = RequestMethod.POST)
	public String save(CtaUser ctaUser, RedirectAttributes redirectAttributes) {
		try {
			//areaCode处理
			if (StringUtils.isNotEmpty(ctaUser.getCode())) {
				Map<String, String> areaMap = Zonemap.split(ctaUser
						.getCode());
				if ("市辖区".equals(areaMap.get("city"))
						|| areaMap.get("city") == null) {
					ctaUser.setCity(areaMap.get("province"));
				} else {
					ctaUser.setCity(areaMap.get("city"));
				}
				ctaUser.setProvince(areaMap.get("province"));
			}
			
			ctaService.save(ctaUser);

			redirectAttributes.addFlashAttribute("message", "保存成功!");
		} catch (Exception e) {
			logger.debug("保存失败: {}", e.getMessage());
			logger.error(e.getMessage(), e);
			redirectAttributes.addFlashAttribute("message", FlashAttributeUtil.build(false, "保存失败！"));
		}
		return "redirect:/ssouser/cta";
	}
}
